"use client";

import React, { useState, useRef } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Sparkles, FileDown, Copy, RefreshCcw, Send, HelpCircle, MessageSquare } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { motion } from "framer-motion";
import { ToastEditor } from "@/components/ui/toast-editor";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import toast from 'react-hot-toast';

export default function ContentWriterPage() {
  const [prompt, setPrompt] = useState("");
  const [generating, setGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState("");
  const [editorContent, setEditorContent] = useState("# Start writing...");
  const [isChatOpen, setIsChatOpen] = useState(false);
  const editorRef = useRef<any>(null);

  const handleGenerate = async () => {
    if (!prompt.trim()) return;
    
    setGenerating(true);
    setGeneratedContent("");
    
    // Simulate generation (replace with actual API call)
    setTimeout(() => {
      const mockResponse = "# AI-Generated Content\n\n## Introduction\n\nThis is a simulated AI-generated content response based on your prompt. In a real implementation, this would be the actual content generated by your AI service.\n\n## Main Points\n\n- Point 1: Lorem ipsum dolor sit amet\n- Point 2: Consectetur adipiscing elit\n- Point 3: Sed do eiusmod tempor incididunt\n\n## Conclusion\n\nThank you for using our AI content generator!";
      setGeneratedContent(mockResponse);
      setEditorContent(mockResponse);
      setGenerating(false);
      toast.success('Content generated successfully!');
    }, 2000);
  };

  const handleContentCopy = () => {
    navigator.clipboard.writeText(editorContent);
    toast.success('Content copied to clipboard!');
  };

  const handleContentDownload = () => {
    const element = document.createElement('a');
    const file = new Blob([editorContent], {type: 'text/markdown'});
    element.href = URL.createObjectURL(file);
    element.download = 'ai-generated-content.md';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    toast.success('Content downloaded successfully!');
  };

  const ChatAssistant = () => (
    <div className="p-4 h-full flex flex-col">
      <div className="flex-1 overflow-y-auto border rounded-md p-3 mb-4 space-y-4">
        <div className="bg-muted p-3 rounded-lg max-w-[80%]">
          <p className="text-sm">Hi there! I'm your AI writing assistant. How can I help with your content?</p>
        </div>
        
        <div className="bg-primary/10 p-3 rounded-lg ml-auto max-w-[80%]">
          <p className="text-sm">Can you help me write a blog post about AI?</p>
        </div>
        
        <div className="bg-muted p-3 rounded-lg max-w-[80%]">
          <p className="text-sm">Of course! I'd be happy to help. What specific aspects of AI would you like to focus on? For example:</p>
          <ul className="text-sm list-disc ml-5 mt-2">
            <li>AI in everyday life</li>
            <li>Machine learning fundamentals</li>
            <li>Ethical considerations</li>
            <li>Future of AI technology</li>
          </ul>
        </div>
      </div>
      
      <div className="flex gap-2">
        <Textarea 
          placeholder="Type your message..."
          className="min-h-[60px] resize-none"
        />
        <Button className="shrink-0">
          <Send className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );

  return (
    <div className="container mx-auto px-4 sm:px-6">
      <div className="mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center">
        <div>
          <h1 className="text-3xl font-bold mb-2">AI Content Writer</h1>
          <p className="text-muted-foreground">Create amazing content with the power of AI</p>
        </div>
        
        <div className="mt-4 sm:mt-0 flex items-center">
          <Sheet>
            <SheetTrigger asChild>
              <Button 
                variant="outline" 
                className="flex items-center gap-2"
              >
                <MessageSquare className="h-4 w-4" />
                <span className="hidden sm:inline">Chat Assistant</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="right" className="w-full sm:w-[400px] p-0">
              <SheetHeader className="p-4 border-b">
                <SheetTitle>AI Assistant</SheetTitle>
                <SheetDescription>
                  Get help with your content creation
                </SheetDescription>
              </SheetHeader>
              <div className="h-[calc(100%-120px)]">
                <ChatAssistant />
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>
      
      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
        {/* Prompt section */}
        <Card className="col-span-1">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-primary" />
              Prompt
            </CardTitle>
            <CardDescription>
              Describe what type of content you want to generate
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Textarea 
              placeholder="Write a blog post about the benefits of AI in content creation..."
              className="min-h-[200px] resize-none"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
            />
          </CardContent>
          <CardFooter className="flex flex-col sm:flex-row justify-between gap-3">
            <Button variant="outline" size="sm" className="w-full sm:w-auto">
              <HelpCircle className="h-4 w-4 mr-2" />
              Tips
            </Button>
            <Button 
              onClick={handleGenerate} 
              disabled={!prompt.trim() || generating}
              className="gap-2 w-full sm:w-auto"
            >
              {generating ? (
                <>
                  <RefreshCcw className="h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Send className="h-4 w-4" />
                  Generate
                </>
              )}
            </Button>
          </CardFooter>
        </Card>
        
        {/* Output section */}
        <Card className="col-span-1 xl:col-span-2">
          <CardHeader>
            <CardTitle>Generated Content</CardTitle>
            <CardDescription>
              Review and edit your AI-generated content
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="editor">
              <TabsList className="mb-4 w-full justify-start">
                <TabsTrigger value="editor">Editor</TabsTrigger>
                <TabsTrigger value="preview">Preview</TabsTrigger>
              </TabsList>
              <TabsContent value="editor" className="min-h-[400px]">
                {generating ? (
                  <div className="flex flex-col items-center justify-center h-[400px]">
                    <motion.div
                      animate={{ 
                        scale: [1, 1.2, 1],
                        opacity: [0.5, 1, 0.5]
                      }}
                      transition={{ 
                        repeat: Infinity, 
                        duration: 1.5
                      }}
                    >
                      <Sparkles className="h-12 w-12 text-primary/50" />
                    </motion.div>
                    <p className="text-muted-foreground mt-4">Crafting your content...</p>
                  </div>
                ) : (
                  <ToastEditor
                    initialValue={editorContent}
                    height="400px"
                    placeholder="Your content will appear here"
                    onChange={setEditorContent}
                    onSave={handleContentDownload}
                  />
                )}
              </TabsContent>
              <TabsContent value="preview" className="min-h-[400px]">
                {generatedContent ? (
                  <div className="prose prose-sm dark:prose-invert max-w-none h-[400px] overflow-y-auto p-4 border rounded-md">
                    <div dangerouslySetInnerHTML={{ 
                      __html: generatedContent.replace(/\n/g, '<br>')
                                             .replace(/^# (.*)/gm, '<h1>$1</h1>')
                                             .replace(/^## (.*)/gm, '<h2>$1</h2>')
                                             .replace(/^### (.*)/gm, '<h3>$1</h3>')
                                             .replace(/^- (.*)/gm, '<li>$1</li>')
                    }} />
                  </div>
                ) : (
                  <div className="flex items-center justify-center h-[400px]">
                    <p className="text-muted-foreground">Generate content to see preview</p>
                  </div>
                )}
              </TabsContent>
            </Tabs>
          </CardContent>
          <CardFooter className="flex flex-col sm:flex-row justify-between gap-4">
            <div className="flex gap-2 w-full sm:w-auto">
              <Button 
                variant="outline" 
                size="sm" 
                disabled={!generatedContent}
                onClick={handleContentDownload}
                className="flex-1 sm:flex-initial"
              >
                <FileDown className="h-4 w-4 mr-2" />
                Download
              </Button>
              <Button 
                variant="outline" 
                size="sm" 
                disabled={!generatedContent}
                onClick={handleContentCopy}
                className="flex-1 sm:flex-initial"
              >
                <Copy className="h-4 w-4 mr-2" />
                Copy
              </Button>
            </div>
            <Button 
              variant="outline" 
              size="sm" 
              disabled={!generatedContent || generating}
              onClick={handleGenerate}
              className="w-full sm:w-auto"
            >
              <RefreshCcw className="h-4 w-4 mr-2" />
              Regenerate
            </Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
} 